페이징 처리 - 영속(persistence)계층, 비즈니스 계층
-->네트워크를 통해 데이터를 전송 받을 때 가능하면 최소한의 데이터만을 전송하기 위해

핵심 1)사용자에게 필요한 만큼의 데이터를 전송 2)서버에서 최대한 빠르게 결과를 만들어 내기
-1단계: URI의 문자열을 조절해서 원하는 페이지의 데이터가 출력되도록 하는 단계
-2단계: 목록 페이지 하단에 페이지 번호를 보여주고 클릭하면 페이지를 이동하는 단계
-3단계: 목록 페이지에서 조회나 수정 작업을 한 후에 다시 원래의 목록 페이지로 이동할 수 있게 처리

1) a태그의 href속성을 이용해서 직접 이동할 URI를 지정하는 방식
2) form태그를 이용해서 링크를 클릭하면 여러 정보를 전달하는 방식
a태그는 많은 양의 반복적인 링크 정보가 생성되지만 form태그를 이용하는 경우 필요한 정보가 태그 안에 작성되어서 사용되기 때문에 구현에 있어서 보다 편리

페이징 처리의 원칙
1. 페이징 처리는 반드시 GET방식으로
2. 페이징 처리가 되면 조회 화면에서 반드시 목록가기가 필요
3. 3페이지에서 조회가 되면 다시 목록가기 누르면 3페이지로 다시 이동되어야 함
4. 페이징 처리에는 반드시 필요한 페이지 번호만을 제공

많은 양의 데이터 처리를 위해 필요한 sql문
insert into tbl_board(title, content, writer) (select title, content, writer from book_ex.tbl_board);
select count(*) from book_ex.tbl_board;

화면 하단의 페이징 처리
필요한 변수 startPage, endPage, totalCount(끝 페이지 번호를 계산할 때 사용), prev, next


정리
게시판 (CRUD)기능과 페이징 처리, 검색 처리 페이징과 검색은 나중에 한번더 보기
게시판 개발 순서
1. 개발 환경의 준비 및 디비 준비
2. 새로운 게시물을 등록할 수 있는 기능 개발
3. 전체 목록 기능 개발
4. 조회 기능, 삭제 기능, 수정 기능 개발
5. 페이징 처리
6. 검색 처리
게시물의 최종 완성의 형태는 반드시 트랜잭션 관리가 포함되어야 하는데 이는 파트4에서...


Part3요약(이번장 Ajax방식의 이해, @RestController, json데이터처리, handlebars를 이용한 템플릿 처리)
**REST(Representational State Transfer) 하나의 URI는 하나의 고유한 리소스를 대표하도록 설계된다는 개념(최근에 서버에 접근하는 기기가 다양해 지면서 다양한 기기에서 공통으로
데이터를 처리할 수 있는 규칙을 만드려고 하는데 이러한 시도가 REST방식)

REST API는 외부에서 특정 URI를 통해서 사용자가 원하는 정보를 제공하는 방식
최근에 Open API에서 많이 사용되면서 REST방식으로 제공되는 외부 연결 URI를 REST API라고 하고, REST방식의 서비스 제공이 가능한 것을 Restful하다고 표현


@RestController는 클라이언트 측에서 기능이 많아지는 경우에 사용(즉, 안드로이드, 아이폰과 같은 모바일 환경이나 HTML5나 Ajax 등에서)

웹을 통해서 작업할 떄 REST 방식이 가장 많이 쓰이는 형태는 Ajax와 같이 결합된 형태
Ajax(Asynchronous JavaScript and XML):주로 브라우저에서 대화형으로 서버와 데이터를 주고받는 형태의 메시지 전송 방식을 의미
(ex 구글의 지도나 포털 사이트의 자동완성 기능들)
비동기화의 의미는 결과의 데이터를 기다리는 방식이 아닌, 결과를 통보받는 형식(즉, 로직을 호출하고 결과를 기다리지 않고 결과가 통보될 때 실행할 로직을 지정하는 방식)
동기화 방식은 순차적인 일을 실행하는 데에는 적합, 반면에 비동기 방식은 일을 처리한 결과를 기다리지 않고 흐름이 지속됨.
Ajax특징:브라우저 화면 전환이 필요 없어서 사용자 경험 측면에서 좋다는 점, 서버에서 화면에 필요한 모든 데이터를 만드는 대신 서버는 필요한 데이터만 전달

MVC의 경우 REST방식의 애노테이션
@PathVariable - URI의 경로에서 원하는 데이터를 추출하는 용도로 사용
@RequestBody - 전송된 JSON데이터를 객체로 변환해 주는 애노테이션으로 @ModelAttribute와 유사한 역할을 하지만 JSON에서 사용된다는 점이 차이

chapter4. 화면에서읭 Ajax호출

